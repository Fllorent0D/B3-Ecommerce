/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package applicationmail;

import java.awt.Desktop;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.NoSuchElementException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.mail.Address;
import javax.mail.Flags;
import javax.mail.Folder;
import javax.mail.Header;
import javax.mail.Message;
import javax.mail.MessagingException;
import javax.mail.Multipart;
import javax.mail.Part;
import javax.mail.Session;
import javax.mail.Store;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.ListModel;

/**
 *
 * @author florentcardoen
 */
public class InboxPanel extends javax.swing.JPanel {
    private Store storeMail;
    private Message[] messageList;
    private ArrayList<Message> messageAffiche;

    public Folder folderMail;
    private File dossierFichier;
    private Session mailSession;
    private String user;
    
    /**
     * Creates new form InboxPanel
     */
    public InboxPanel() {
        initComponents();
        inboxList.setCellRenderer(new InboxCellRenderer());
        
    }
    public void setStore(Store st)
    {
        storeMail = st;
       
        try
        {
            folderMail = storeMail.getFolder("INBOX");
            folderMail.open(Folder.READ_WRITE);
            folderMail.close(true);
        } catch (MessagingException ex) {
            JOptionPane.showMessageDialog(null,"Une erreur est survenue lors de la récupération de votre boite de messagerie","Erreur",JOptionPane.ERROR_MESSAGE);
            Logger.getLogger(InboxPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
       
    }
     public synchronized ArrayList<Message> downloadMails()
    {
        statusLabel.setText("Mise à jour de la messagerie...");
        ArrayList<Message> messageTmp;
        Message[] tmp;
 
        try
        {
            if(folderMail.isOpen())
                folderMail.close(true);
            
            folderMail = storeMail.getFolder("INBOX");
            folderMail.open(Folder.READ_WRITE);
            tmp = folderMail.getMessages();
        } catch (MessagingException ex) {
            Logger.getLogger(InboxPanel.class.getName()).log(Level.SEVERE, null, ex);
            return null;
        }

        messageTmp = new ArrayList<>();
       
        for(int i = tmp.length-1; i >= 0 ; i--)
            messageTmp.add(tmp[i]);
        
        
        statusLabel.setText("Messagerie à jour");

        return messageTmp;
       

    }
    public synchronized void refreshJlist(ArrayList<Message> messageTmp)
    {
        
        messageAffiche = messageTmp;
        DefaultListModel dlm = new DefaultListModel();
       
        for(Message m : messageTmp){
            dlm.addElement(m);
            
        }
        
        messageAffiche = messageTmp;
        inboxList.setModel(dlm);
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();
        jSplitPane1 = new javax.swing.JSplitPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        inboxList = new javax.swing.JList<>();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        fromLabel = new javax.swing.JLabel();
        subjectLabel = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        mailContent = new javax.swing.JTextPane();
        jLabel4 = new javax.swing.JLabel();
        dateLabel = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        pieceJointeLabel = new javax.swing.JLabel();
        pieceJointeButton = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        statusLabel = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        refreshButton = new javax.swing.JButton();

        jMenu1.setText("File");
        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        setPreferredSize(new java.awt.Dimension(852, 460));

        jSplitPane1.setBorder(null);
        jSplitPane1.setDividerSize(5);

        jScrollPane1.setMinimumSize(new java.awt.Dimension(200, 70));

        inboxList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                inboxListMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(inboxList);

        jSplitPane1.setLeftComponent(jScrollPane1);

        jLabel1.setText("De :");

        jLabel3.setText("Sujet : ");

        mailContent.setBorder(null);
        mailContent.setFocusable(false);
        jScrollPane3.setViewportView(mailContent);

        jLabel4.setText("Date :");

        jLabel5.setText("Pièce jointe :");

        pieceJointeButton.setText("Télécharger");
        pieceJointeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pieceJointeButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(jLabel1)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(fromLabel)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(subjectLabel)
                            .addComponent(dateLabel))
                        .addGap(75, 75, 75)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(pieceJointeLabel))
                            .addComponent(pieceJointeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(187, 557, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addComponent(jScrollPane3)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(fromLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(dateLabel)
                    .addComponent(jLabel5)
                    .addComponent(pieceJointeLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(subjectLabel)
                    .addComponent(pieceJointeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 361, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27))
        );

        jSplitPane1.setRightComponent(jPanel1);

        jButton3.setText("Nouveau message");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        deleteButton.setText("Supprimer");
        deleteButton.setToolTipText("");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        statusLabel.setText("jLabel4");

        jLabel2.setText("Status : ");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(statusLabel)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(statusLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 22, Short.MAX_VALUE)
                .addComponent(jLabel2))
        );

        refreshButton.setText("Rafraichir");
        refreshButton.setToolTipText("");
        refreshButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jSplitPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(refreshButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(deleteButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 476, Short.MAX_VALUE)
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton3)
                    .addComponent(deleteButton)
                    .addComponent(refreshButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSplitPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 437, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void inboxListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_inboxListMouseClicked
        if(inboxList.getSelectedIndex() < 0)
            return;

        pieceJointeLabel.setVisible(false);
        pieceJointeButton.setVisible(false);
        jLabel5.setVisible(false);
        mailContent.setText("");
        Message m = messageAffiche.get(inboxList.getSelectedIndex());
        try{

            if(m.getSubject() != null)
                subjectLabel.setText(m.getSubject());
            else
                subjectLabel.setText("Pas de sujet...");
            /* Ne marche pas pour l'école maintenant bien...*/
            String from = "";
            for(Address a : m.getFrom())
            {
                from += " " + a.toString();
            }
            fromLabel.setText(from);

              /* Enumeration headers = m.getAllHeaders();
                        while (headers.hasMoreElements()) {
                          Header h = (Header) headers.nextElement();
                          if(h.getName().equals("Return-Path"))
                                fromLabel.setText(h.getValue());

                        }*/
            if(m.isMimeType("text/plain") || m.isMimeType("text/html")) { //Le mail est juste du texte
                mailContent.setText(m.getContent().toString());
            }
            else    
            { 
                Multipart contenu = (Multipart)m.getContent();
                String text ="";
                int nbrDeMorceaux = contenu.getCount();
                
                for(int cpt = 0; cpt < nbrDeMorceaux; cpt++)
                {
                    Part morceau = contenu.getBodyPart(cpt);
                    
                    //Récupération de l'emplacement de la pièce jointe (dans le mail ou sur un serveur distant)
                    String disposition  = morceau.getDisposition();
                    if(morceau.isMimeType("text/plain")  && disposition == null) //Si c'est du texte
                    {
                        
                        mailContent.setText(mailContent.getText() + morceau.getContent().toString());

                    }
                    
                    if(disposition != null && disposition.equalsIgnoreCase(Part.ATTACHMENT))
                    {   
                        Path documentRecus = Paths.get(morceau.getFileName());
                        jLabel5.setVisible(true);
                        
                        pieceJointeLabel.setVisible(true);
                        pieceJointeLabel.setText(documentRecus.getFileName().toString());
                        pieceJointeButton.setVisible(true);
                    }

                }

            }
            
            if(m.getSentDate() != null)
            {
                SimpleDateFormat df = new SimpleDateFormat("dd/MM/yyyy HH:mm");
                dateLabel.setText(df.format(m.getSentDate()));
            }
                 
        } catch (IOException ex) {
            Logger.getLogger(InboxPanel.class.getName()).log(Level.SEVERE, null, ex);
        } catch (MessagingException ex) {
            Logger.getLogger(InboxPanel.class.getName()).log(Level.SEVERE, null, ex);
        }        // TODO add your handling code here:
    }//GEN-LAST:event_inboxListMouseClicked

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        if(inboxList.getSelectedIndex() < 0)
            return;
        
        //Recuperation du mail dans la liste
        Message m = messageAffiche.get(inboxList.getSelectedIndex());
        
        //On affiche une boite de dialog pour confirmer la suppression
        int optionDialogue = JOptionPane.YES_NO_OPTION;
        try {
            optionDialogue = JOptionPane.showConfirmDialog(null, "Voulez vous vraiment supprimer ce mail : " + m.getSubject(), "Demande suppression", optionDialogue);
        } catch (MessagingException ex) {
            Logger.getLogger(InboxPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        //Le mail est marque à supprimer (pop3 supprime définitivement à la fermeture du fichier)
        if(optionDialogue == JOptionPane.YES_OPTION)
        {
            ArrayList<Message> tmp = new ArrayList<>();
            try {
                m.setFlag(Flags.Flag.DELETED, true);
            
                tmp = downloadMails();
                refreshJlist(tmp); //On rafraichit l'affichage
                
            } catch (MessagingException ex) {
                Logger.getLogger(InboxPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
                                    System.out.println("FIN");

    }//GEN-LAST:event_deleteButtonActionPerformed

    private void refreshButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshButtonActionPerformed
        new Thread(){
            @Override
            public void run() {
                ArrayList<Message> tmp = new ArrayList<>();
                tmp = downloadMails();
                refreshJlist(tmp); //On rafraichit l'affichage
            }
        }.start();
    }//GEN-LAST:event_refreshButtonActionPerformed
    public void createDirectory(String user)
    {
        dossierFichier = new File(user);
        
        if(!dossierFichier.exists())
            dossierFichier.mkdir();
        
        
        System.out.println(dossierFichier.getAbsolutePath());
    }
    private void pieceJointeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pieceJointeButtonActionPerformed
                                                       
        Message m = messageAffiche.get(inboxList.getSelectedIndex());
        
        PieceJointe pj;
        try
        {
            Multipart contenu = (Multipart)m.getContent();

            int nbrDeMorceaux = contenu.getCount();

            for(int cpt = 0; cpt < nbrDeMorceaux; cpt++)
            {
                Part morceau = contenu.getBodyPart(cpt);

                //Récupération de l'emplacement de la pièce jointe (dans le mail ou sur un serveur distant)
                String disposition  = morceau.getDisposition();

                if(disposition != null && disposition.equalsIgnoreCase(Part.ATTACHMENT))
                {
                    InputStream is = morceau.getInputStream();
                    ByteArrayOutputStream baos = new ByteArrayOutputStream();
                    int carac;

                    while((carac = is.read()) != -1)
                        baos.write(carac);

                    baos.flush();

                    
                    Path documentRecus = Paths.get(morceau.getFileName());

                    //Chemin du téléchargement
                    String fileName = dossierFichier.getAbsolutePath() + System.getProperty("file.separator");
                    fileName += documentRecus.getFileName().toString();//On recupere juste le nom du fichier reçu sans le path
                    
                    //Ecriture du fichier
                    FileOutputStream fos = new FileOutputStream(fileName);
                    baos.writeTo(fos);
                    fos.close();
                    
                    //Ouverture/visionnage du fichier téléchargé
                    Desktop.getDesktop().open(new File(fileName));
                }
            }
        } catch (IOException ex) {
            Logger.getLogger(InboxPanel.class.getName()).log(Level.SEVERE, null, ex);
        } catch (MessagingException ex) {
            Logger.getLogger(InboxPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
           // TODO add your handling code here:
    }//GEN-LAST:event_pieceJointeButtonActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        NewMailFrame nmf = new NewMailFrame(mailSession, user);
        nmf.setVisible(true);
    }//GEN-LAST:event_jButton3ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel dateLabel;
    private javax.swing.JButton deleteButton;
    private javax.swing.JLabel fromLabel;
    private javax.swing.JList<String> inboxList;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JTextPane mailContent;
    private javax.swing.JButton pieceJointeButton;
    private javax.swing.JLabel pieceJointeLabel;
    private javax.swing.JButton refreshButton;
    public javax.swing.JLabel statusLabel;
    private javax.swing.JLabel subjectLabel;
    // End of variables declaration//GEN-END:variables

    public void setSession(Session s) {
        mailSession = s;
    }

    public void setUser(String u) {
        user = u;
    }
}
